#!/usr/bin/python

import sys
sys.path.append('../common')

import os
import time
import logging
import argparse
from util import check_output, check_both, run_bg, strip_comments

CLICK_CONF = 'autogen.click'
CLICK = '/usr/local/bin/click'
TC_SETUP = './tc_setup.py'

def get_topo_file(suffix):
    if args.topology[-1] == '/':
        args.topology = args.topology[0:-1]
    topo_name = os.path.basename(args.topology)
    filepath = os.path.join(args.topology, '%s.%s' % (topo_name, suffix))
    if not os.path.isfile(filepath):
        logging.getLogger(__name__).error('Could not find %s' % filepath)
        exit(-1)
    return filepath

def autogen_click_conf(servers_file, clients_file):
    logging.getLogger(__name__).debug('Autogenerating %s from %s and %s'\
        % (CLICK_CONF, servers_file, clients_file))
    with open(CLICK_CONF, 'w') as clickfile:
        clickfile.write('// This file is autogenerated. Do not hand edit.\n\n')
        with open(servers_file, 'r') as serversfile:
            for line in strip_comments(serversfile):
                clickfile.write('KernelTun(%s/8) -> Discard;\n' % (line.strip()))
        serversfile.closed
        with open(clients_file, 'r') as clientsfile:
            for line in strip_comments(clientsfile):
                clickfile.write('KernelTun(%s/8) -> Discard;\n' % (line.strip()))
        clientsfile.closed
    clickfile.closed

def install_filters(links_file):
    with open(links_file, 'r') as linksf:
        for line in strip_comments(linksf):
            elems = line.split(' ')
            check_output('%s update %s %s -c %i'\
                % (TC_SETUP, elems[0], elems[2], int(elems[1].split('link')[1])))
    linksf.closed

def execute_event(event):
    logging.getLogger(__name__).info('Updating link:  %s' % ' '.join(event))
    try:
        check_output('%s update -c %i -b %s -l %s'\
            % (TC_SETUP, int(event[1].split('link')[1]), event[2], event[3]))
    except Exception as e:
        logging.getLogger(__name__).error(e)

def run_events():
    events = []
    with open(get_topo_file('events'), 'r') as eventsf:
        for line in strip_comments(eventsf):
            events.append(line.split(' '))
    eventsf.closed

    logging.getLogger(__name__).info('Running link events...')
    for event in events:
        # decide when to execute this event
        if event[0] is '*':
            raw_input('Press enter to run event:  %s' % ' '.join(event))
        else:
            try:
                time.sleep(float(event[0]))
            except:
                logging.getLogger(__name__).warning('Skipping invalid event: %s' % ' '.join(event))
                continue
        execute_event(event)
    logging.getLogger(__name__).info('Done running events.')

def start_network():
    logging.getLogger(__name__).info('Starting simulated network...')

    # Create fake NICs
    autogen_click_conf(get_topo_file('servers'), get_topo_file('clients'))
    run_bg('%s %s' % (CLICK, CLICK_CONF))

    # Set up traffic shaping
    check_output('%s start' % TC_SETUP)
    install_filters(get_topo_file('bottlenecks'))

    # TODO: launch apache instances
    logging.getLogger(__name__).info('Network started.')

def stop_network():
    logging.getLogger(__name__).info('Stopping simulated network...')
    # TODO: stop apache instances

    # Stop traffic shaping
    try:
        check_output('%s stop' % TC_SETUP)
    except Exception as e:
        logging.getLogger(__name__).error(e)

    # Destroy fake NICs
    try:
        check_both('killall -9 click', shouldPrint=False)
        time.sleep(0.1)
    except:
        pass
    logging.getLogger(__name__).info('Network stopped.')


def main():

    if args.command == 'start':
        start_network()
    elif args.command == 'run':
        run_events()
    elif args.command == 'stop':
        stop_network()
    elif args.command == 'restart':
        stop_network()
        start_network()

if __name__ == "__main__":
    # set up command line args
    parser = argparse.ArgumentParser(description='Launch a simulated network.')
    parser.add_argument('topology', help='directory containing the topology files (topo.clients, topo.servers, topo.bottlenecks, topo.events, where topo is the name of the topology)')
    parser.add_argument('command', choices=['start','stop','restart','run'], help='start/stop/restart the network, or run a series of link events?')
    parser.add_argument('-q', '--quiet', action='store_true', default=False, help='only print errors')
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='print debug info. --quiet wins if both are present')
    args = parser.parse_args()
    
    # set up logging
    if args.quiet:
        level = logging.WARNING
    elif args.verbose:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(
        format = "%(levelname) -10s %(asctime)s %(module)s:%(lineno) -7s %(message)s",
        level = level
    )

    main()
