#!/usr/bin/python

import sys
sys.path.append('../common')

import time
import logging
import argparse
from util import check_output, check_both, run_bg, strip_comments

CLICK_CONF = 'autogen.click'
CLICK = '/usr/local/bin/click'
TC_SETUP = './tc_setup.py'

def autogen_click_conf(endhosts_file):
    logging.getLogger(__name__).debug('Autogenerating %s from %s' % (CLICK_CONF, endhosts_file))
    with open(endhosts_file, 'r') as hostsfile:
        with open(CLICK_CONF, 'w') as clickfile:
            clickfile.write('// This file is autogenerated. Do not hand edit.\n\n')
            for line in strip_comments(hostsfile):
                clickfile.write('KernelTun(%s/8) -> Discard;\n' % (line.strip()))
        clickfile.closed
    hostsfile.closed

def execute_event(event):
    logging.getLogger(__name__).info('Updating link:  %s' % ' '.join(event))
    try:
        check_output('%s update %s %s -b %s -l %s'\
            % (TC_SETUP, event[1], event[2], event[3], event[4]))
    except Exception as e:
        logging.getLogger(__name__).error(e)

def run_events():
    events = []
    with open(args.events_file, 'r') as eventsf:
        for line in strip_comments(eventsf):
            events.append(line.split(' '))
    eventsf.closed

    logging.getLogger(__name__).info('Running link events...')
    for event in events:
        # decide when to execute this event
        if event[0] is '*':
            raw_input('Press enter to run event:  %s' % ' '.join(event))
        else:
            try:
                time.sleep(float(event[0]))
            except:
                logging.getLogger(__name__).warning('Skipping invalid event: %s' % ' '.join(event))
                continue
        execute_event(event)
    logging.getLogger(__name__).info('Done running events.')

def start_network():
    logging.getLogger(__name__).info('Starting simulated network...')
    autogen_click_conf(args.endhosts_file)
    run_bg('%s %s' % (CLICK, CLICK_CONF))
    check_output('%s start' % TC_SETUP)
    logging.getLogger(__name__).info('Network started.')

def stop_network():
    logging.getLogger(__name__).info('Stopping simulated network...')
    try:
        check_output('%s stop' % TC_SETUP)
    except Exception as e:
        logging.getLogger(__name__).error(e)

    try:
        check_both('killall -9 click', shouldPrint=False)
        time.sleep(0.1)
    except:
        pass
    logging.getLogger(__name__).info('Network stopped.')


def main():

    if args.command == 'start':
        start_network()
    elif args.command == 'run':
        run_events()
    elif args.command == 'stop':
        stop_network()
    elif args.command == 'restart':
        stop_network()
        start_network()

if __name__ == "__main__":
    # set up command line args
    parser = argparse.ArgumentParser(description='Launch a simulated network.')
    parser.add_argument('endhosts_file', help='the file containing the list of endhosts (as IP addresses)')
    parser.add_argument('events_file', help='the file containing the list of link characteristic changes')
    parser.add_argument('command', choices=['start','stop','restart','run'], help='start/stop/restart the network, or run a series of link events?')
    parser.add_argument('-q', '--quiet', action='store_true', default=False, help='only print errors')
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='print debug info. --quiet wins if both are present')
    args = parser.parse_args()
    
    # set up logging
    if args.quiet:
        level = logging.WARNING
    elif args.verbose:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(
        format = "%(levelname) -10s %(asctime)s %(module)s:%(lineno) -7s %(message)s",
        level = level
    )

    main()
